[{"authors":["Puneet Mehrotra","Amanda Carbonari","Peter Chen","Ivan Beschastnikh","Andrew Warfield"],"categories":null,"content":"Click on the Slides button above to view the built-in slides feature.\n -- ","date":1526022000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1526022000,"objectID":"cd6d9d084287506b4668ad90c6aff50a","permalink":"/talk/example-talk/","publishdate":"2018-05-11T00:00:00-07:00","relpermalink":"/talk/example-talk/","section":"talk","summary":"Click on the Slides button above to view the built-in slides feature.\n -- ","tags":[],"title":"Cross-platform Data Integrity and Confidentiality with Graduated Access Control","type":"talk"},{"authors":null,"categories":null,"content":" Revelio is a tool that statically analyses Python code for known vulnerabilities. The tool provides a IDE plugin for Sublime for highlighting vulnerabilities as well as a command-line interfaces that provides the following features:\n Detection of vulnerable functions Detection of dependencies with vulnerabilities Automatic replacement of vulnerable function with safe alternatives Automatically running tests Detecting and updating outdated dependencies Downloading and analyzing of GitHub repositories as well as local files Automatically creating pull-requests to GitHub repositories to fix vulnerable functions  Currently, Revelio is just a prototype which was developed as part of a Software Engineering course.\nInstallation  Download the source code of the tool Install all requirements: pip install -r requirements.txt  Configuration In order for the tool to access the Github API the Github username and password need to be set as environment variables: export GITHUB_USER=\u0026lt;user\u0026gt; and export GITHUB_PASSWORD=\u0026lt;password\u0026gt;.\nUsage To analyze a local repository the path must be provided:\npython cli.py --path \u0026quot;/local/path\u0026quot;\nTo analyze a remote repository on github the URL to the repository must be provided:\npython cli.py --url \u0026quot;\u0026lt;URL\u0026gt;\u0026quot;\nTo access the github repository the API access token needs to be set (see Configuration).\nCollected Data For analyzed github repositories metrics will be collected in /tmp in metrics.json.\nDocker To build the container:\ndocker build -t 507 .\nTo run the container:\ndocker run --name 507 -v /tmp/dock:/tmp -e GITHUB_USER=\u0026quot;username\u0026quot; -e GITHUB_PASSWORD=\u0026quot;password\u0026quot; 507 \u0026amp;\nTo remove the container:\ndocker rm 507\nSupported Testing Frameworks The space of Python testing is very fragmented, and there is not universal method of writing testcases. To make the process simple and extensible, we use the tox test framework, that simplifies the execution of the tests. We look at the standard locations to discover tests, and support the standard testing mechanisms. Here are our assumptions:\n The tests are placed in the ${project}/test[s] directory\n The requirements necessary are present in a requirements.txt file. Often developers specify multiple versions of this file. We look for all files in the repository that have a name starting with \u0026lsquo;requirements\u0026rsquo; to include for installation in the virtualenv.\n The supported methods of testing the project are: setup.py with a test recipe, py.tests, nosetests, and plain old unittests.\n  Known issues and fixes When running tox in the macOS terminal the following error might ocurr:\nunknown locale: UTF-8 in Python\n","date":1461740400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461740400,"objectID":"5baf35d955a49003f5750a7a82f9ee0f","permalink":"/project/revelio/","publishdate":"2016-04-27T00:00:00-07:00","relpermalink":"/project/revelio/","section":"project","summary":"A tool for doing static analysis of Python code for known vulnerabilities","tags":["Software Engineering"],"title":"Revelio","type":"project"},{"authors":null,"categories":null,"content":"Security of data is tightly coupled to its access policy. However, in practice, a data owner has control of his data\u0026rsquo;s access policies only as far as the boundaries of his own systems. In this paper, we introduce graduated access control, which provides mobile, programmable, and dynamically-resolving policies for access control that extends a data owner\u0026rsquo;s policies across system boundaries. We realize this through a novel data-centric abstraction called trusted capsules and its associated system, the trusted data monitor.\nA trusted capsule couples data and policy into a single mobile unit. A capsule is backwards-compatible and is indistinguishable from a regular file to applications. In coordination with the trusted data monitor a capsule provides data integrity and confidentiality on remote devices, strong authentication to a trusted capsule service, and supports nuanced and dynamic access control decisions on remote systems. We implemented our data monitor using ARM TrustZone.\nWe show that graduated access control can express novel and useful real world policies, such as revocation, remote monitoring, and risk-adaptable disclosure. We illustrate trusted capsules for different file formats, including JPEG, FODT, and PDF. We also show compatibility with unmodified applications, such as LibreOffice Writer, Evince, and VLC.\n","date":1461740400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461740400,"objectID":"535d24f6b95725ecf701f6f4fc105dd2","permalink":"/project/trusted_capsules/","publishdate":"2016-04-27T00:00:00-07:00","relpermalink":"/project/trusted_capsules/","section":"project","summary":"ARM TrustZone backed data privacy on remote devices","tags":["Security"],"title":"Trusted Capsules","type":"project"},{"authors":null,"categories":null,"content":" Welcome to Slides Academic\nFeatures  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides  Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E  Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot; if porridge == \u0026quot;blueberry\u0026quot;: print(\u0026quot;Eating...\u0026quot;)  Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = \\;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\nFragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}}  Press Space to play!\nOne  Two  Three \nA fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears  Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}}  Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view   Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links   night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links  Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026quot;/img/boards.jpg\u0026quot; \u0026gt;}} {{\u0026lt; slide background-color=\u0026quot;#0000FF\u0026quot; \u0026gt;}} {{\u0026lt; slide class=\u0026quot;my-style\u0026quot; \u0026gt;}}  Custom CSS Example Let\u0026rsquo;s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }  Questions? Ask\nDocumentation\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"c2915ec5da95791851caafdcba9664af","permalink":"/slides/example-slides/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/slides/example-slides/","section":"slides","summary":"Welcome to Slides Academic\nFeatures  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides  Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E  Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot; if porridge == \u0026quot;blueberry\u0026quot;: print(\u0026quot;Eating...\u0026quot;)  Math In-line math: $x + y = z$","tags":null,"title":"Slides","type":"slides"}]